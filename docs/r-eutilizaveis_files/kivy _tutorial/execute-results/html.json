{
  "hash": "ef4262a8c98355ecdbca9a93a8a50667",
  "result": {
    "markdown": "---\ntitle: Tutorial de `kivy` para criação de app de celular\nengine: knitr\ntoc: TRUE\ntoc-location: left\nlang: pt\n---\n\n\n## O que é o kivy?\n\n`kivy` é uma plataforma para criação de GUI (Graphic User Interface) usando Python como linguagem.  \n\nA grande vantagem do `Kivy` é a facilidade de criar aplicativos para Android e IPhone.  \n\nPara criar programas com GUI para desktop (Windows, Linux e Mac), prefira o PyQt, que em breve terá aqui um tutorial.\n\n`Kivy` funciona em qualquer sistema operacional, mas as ferramentas para criar um app de celular funciona apenas no `LINUX`. O exemplo que darei aqui será a criação de um arquivo `.apk` que pode ser instalado em celulares rodando Android. \n\nVocê vai precisar do Python3, que já vem instalado com o Linux, e do pip.\n\nEntre com os seguintes comandos no terminal do Linux:\n\n## Instalando e testando `kivy`\n\n- 1. Primeiro, instale o `pip`.\n\n```bash\nsudo apt install python3-pip\n```\n\n- 2. Atualize o pip.\n\n```bash\npython3 -m pip install --upgrade pip setuptools\n```\n\n- 3. Instale o kivy e os exemplos.\n\n```bash\npython3 -m pip install \"kivy[base]\" kivy_examples\n```\n\n- 4. Criar um arquivo Python (obrigatoriamente com o nome `main.py`) contendo o seguinte código (salve em qualquer lugar):\n\n```python\nimport kivy\n\nfrom kivy.app import App\nfrom kivy.uix.label import Label\n\nclass MyApp(App):\n\n    def build(self):\n        return Label(text='Hello world')\n\nif __name__ == '__main__':\n    MyApp().run()\n```\n\nO código acima contém a estrutura mínima para um programa em kivy. Layouts e widgets podem ser adicionados à janela, que serão os mesmos em todos os SO. Mais informações em:\n\n[Documentação oficial do *kivy* ( muito rica) ](https://kivy.org/doc/stable/)\n\n- 5. Execute o aplicativo para testar. Abra o terminal na pasta onde salvou o arquivo main.py e digiter:\n\n```bash\npython3 main.py\n```\n\n## Criando um arquivo `.apk` para Android.\n\nPara criar um arquivo .apk a partir de um arquivo .py usando kivy, usaremos uma ferramenta chamada `buildozer`, que automatiza todo o processo e elimina toda a complexidade da interação com o Android.\n\n\n\n## Buildozer: ferramenta para criação do .apk (Android) e iOS (IPhone)\n\n- 1. Instalando o `buildozer`.\n\nNo terminal, linha por linha:\n\n```bash\npip3 install --user --upgrade buildozer\n```\n\n```bash\nsudo apt update\n```\n\n```bash\nsudo apt install -y git zip unzip openjdk-17-jdk python3-pip autoconf libtool pkg-config zlib1g-dev libncurses5-dev libncursesw5-dev libtinfo5 cmake libffi-dev libssl-dev\n```\n\n```bash\npip3 install --user --upgrade Cython==0.29.33 \n```\n\nApós isso, entre no Nautilus pelo modo Admin:\n\n```bash\nsudo nautilus\n```\n\nHabilite a opção de mostrar arquivos ocultos no Nautilus.  \n\nDentro da pasta `root` abra o aquivo `.bashrc` e inclua a seguinte linha:\n\n```bash\nexport PATH=$PATH:~/.local/bin/\n```\n\n- 2. Criando o aqruivo `.apk`\n\nNo terminal, executa na mesma pasta que o arquivo `main.py` o seguinte comando: \n\n```bash\nbuildozer init\n```\n\nUm arquivo chamado `buildozer.spec` será criado e pode ser editado para mudar as especicações do app.\n\nFinalmente, para construir um `.apk`, entre no terminal:\n\n```bash\nbuildozer android debug\n```\n\nNa primeira execução, o comando demora muito, mas nas posteriores é bem rápido!\n\nO arquivo `.apk` estará na pasta `Bin`. Basta copiá-lo para o celular e instalar (em cada celular é um processo diferente, mas normalmente deve-se habilitar a instalação de programas não veridicados ou hobilitar o modo desenvolvedor).\n\nBons app!",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}