{
  "hash": "a569551982ec0b9387356ca4d47d858d",
  "result": {
    "markdown": "---\n#title: \"\"\n---\n\n\n# ***Tutorial de Kivy***\n\n## Preâmbulo\n\nExistem três plataformas para criar GUI (Graphic User Interface) usando Python como linguagem:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx=data.frame(c('Plataforma','tkinter','kivy','pyqt','pyside'),\n             c('SO','Desktop','Desktop e Mobile','Desktop','Desktop'),\n             c('Dificuldade','6','7','8','7'),  \n             c('Visual','4','5','9','9'), \n             c('Profissional','Não','Não','Não','Sim'),\n             c('Open source','Sim','Sim','Pago com versão livre','Pago'))\n\nknitr::kable(x)\n```\n\n::: {.cell-output-display}\n|c..Plataforma....tkinter....kivy....pyqt....pyside.. |c..SO....Desktop....Desktop.e.Mobile....Desktop....Desktop.. |c..Dificuldade....6....7....8....7.. |c..Visual....4....5....9....9.. |c..Profissional....Não....Não....Não....Sim.. |c..Open.source....Sim....Sim....Pago.com.versão.livre....Pago.. |\n|:----------------------------------------------------|:------------------------------------------------------------|:------------------------------------|:-------------------------------|:---------------------------------------------|:---------------------------------------------------------------|\n|Plataforma                                           |SO                                                           |Dificuldade                          |Visual                          |Profissional                                  |Open source                                                     |\n|tkinter                                              |Desktop                                                      |6                                    |4                               |Não                                           |Sim                                                             |\n|kivy                                                 |Desktop e Mobile                                             |7                                    |5                               |Não                                           |Sim                                                             |\n|pyqt                                                 |Desktop                                                      |8                                    |9                               |Não                                           |Pago com versão livre                                           |\n|pyside                                               |Desktop                                                      |7                                    |9                               |Sim                                           |Pago                                                            |\n:::\n:::\n\n\n\n\n\n\n\nEntre com os seguintes comandos no prompt do `Anaconda`:\n\n- 1. Primeiro, atualize o `conda`.\n\n```python\nconda update conda\n```\n\n- 2. Verique as versões instaladas do Python\n\n```python\nconda search \"^python$\"\n```\n\n- 3. Crie um ambiente virtual para o seu projeto:\n\n```python\nconda create -n meu_env\n```\n\n- 4. Ativar o ambiente virtual\n\n```python\nactivate meu_env\n```\n\n- 5. Criar um arquivo Python (.py) contendo o seguinte código (salve em qualquer lugar):\n\n\n```python\nfrom kivy.app import App\nfrom kivy.uix.gridlayout import GridLayout\nfrom kivy.uix.label import Label\nfrom kivy.uix.image import Image\nfrom kivy.uix.button import Button\nfrom kivy.uix.textinput import TextInput\n\nclass SayHello(App):\n    def build(self):\n        self.window = GridLayout()\n        #add widgets to window\n\n        return self.window\n\nif _name_ == \"__main__\":\n    SayHello().run()\n```\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}