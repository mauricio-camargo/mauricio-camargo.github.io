{
  "hash": "3bc040568f223b95a6011bba961c34a5",
  "result": {
    "markdown": "---\ntitle: \"Truques do Quarto e Github\"\nengine: knitr\ntoc: TRUE\ntoc-location: left\nlang: pt\n---\n\n\n### 1. Linha mágica para dar um `Commit` quando o RStudio trava.\n\nNo RStudio, ao selecionar os arquivos para dar um `Commit`, pode acontecer de travar o programa ou a seleção não funcionar.   \n\nQuando não for possível dar um `Commit`, tente a seguinte linha mágica no terminal do RStudio:\n\n```r\ngit add -A && git commit -m \"staging all files\"\n```\n\n### 2. Quando o RStudio pede para instalar o Python ou o Jupyter, do nada?\n\nInforme no cabeçalho que a engine é a **knitr**, usando `engine: knitr`.\n\n\n```default\n---\ntitle: \"Título\"\nengine: knitr\n---\n```\n:::aside\n\"Engine\" é o motor de renderização (que transforma script em HTML), que pode ser o knitr (do RStudio) ou Jupyter (do Python). O padrão (default) é knitr, mas não sei porque de vez em quando temos que informar manualmente.\n:::\n\n\n<!-- NÃO DEU CERTO.\nNão teve jeito de mostrar a primeira linha (```{css}) em markdow. A solução foi HTML\n\nAssim não dá certo:\n\n::: {.cell}\n\n```{.default .cell-code}\n```{css,  echo=FALSE}\n.justify {\n text-align:\njustify !important\n}  \n```\n:::\n\n ```\n-->\n\n<br>\n\n### 3. E se eu quiser justificar um texto longo?\nPara justificar um texto, pode-se usar:\n\n\n::: {.cell}\n\n```{.markdown .cell-code}\n:::{.justify}\nTesto a ser justificado. Claro que precisa ser um texto longo para testar se justifica ou não, então aqui vai um texto longo: asdasdasd sdfsdfg fghfgh rtertert dfg f fgh sd sdf sdf sd gdfgdfg serw er fgh fg hfg h sdf sdf dfg gfhjfghfg sdfsdfgdrfghdh dfgdfhgfghfghfghgf sdfsdfgfghfghgfh \n:::\n```\n:::\n\n\nNo entanto, há um bug no RStudio e o texto não é justificado nunca.\n\nPrimeiro, é necessário usar `engine: knitr`, como mostrado no item 2.\n\nSe não funcionar, adicione também o seguinte código em qualquer parte do seu script:\n\n<div class=\"sourceCode cell-code\" id=\"cb4\"><pre class=\"sourceCode markdown code-with-copy\"><code class=\"sourceCode markdown\"><span id=\"cb4-1\"><a href=\"#cb4-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"in\">```{css,  echo=FALSE}</span></span>\n<span id=\"cb4-2\"><a href=\"#cb4-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">.</span><span class=\"fu\">justify</span> <span class=\"op\">{</span></span>\n<span id=\"cb4-3\"><a href=\"#cb4-3\" aria-hidden=\"true\" tabindex=\"-1\"></a> text<span class=\"op\">-</span>align<span class=\"op\">:</span></span>\n<span id=\"cb4-4\"><a href=\"#cb4-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>justify <span class=\"op\">!</span>important}</span>\n<span id=\"cb4-5\"><a href=\"#cb4-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">```</span></span></span></code></pre></div><p>\n\n\n<br>\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}