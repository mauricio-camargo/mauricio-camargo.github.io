{
  "hash": "7865caf55fd9975227bd048b729d63d9",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Passos para integrar RStudio e Github\"\nformat: html\ntoc: TRUE\ntoc-location: left\nlang: pt-br\nengine: knitr\n---\n\n\n\n---\n\n## 1.Instalar os programas do ecossistema de reprodutibilidade do R (Windows, Linux ou Mac):\n\n-   R: <https://cran.r-project.org>\n-   RStudio: <https://posit.co/download/rstudio-desktop/>\n-   Quarto: <https://quarto.org/docs/get-started/>  \n-   Git: Veja instruções abaixo.\n\n## 2.Instalar os pacotes no R:\n\n```{.r}\ninstall.packages('usethis')\ninstall.packages('gitcreds')\ninstall.packages('devtools')\ninstall.packages('markdown')\ninstall.packages('rmarkdown')\ninstall.packages('knitr')\n```\n\n::: aside\nEsta é uma maneira de instalar vários pacotes de uma só vez.\n:::\n\nO pacote `tinytex` do R serve para instalar toda a infra-estrutura do $\\LaTeX$ para lidar com PDFs.  \n\n\n```{.r}\ninstall.packages('tinytex')\ntinytex::install_tinytex()\n```\n\n::: aside\nAntes do pacote tinytex a instalação do LaTeX era um inferno! \n:::\n\n## 3. Desativar .RData e . Rhistory no RStudio\n\nEste passo é opcional, porém é muito útil. Para acessá-lo, clique [aqui](Desativar_RData.html).\n\n## 4. Instalar o Git\n\nBaixe e instale o Git para o seu sistema operacional em  [https://git-scm.com/download](https://git-scm.com/download){target=\"_blank\"}.\n\nTeste a instalação do Git no terminal do Windows.  \nPara abrir o terminal, clique no botão Iniciar do Windows e digite `cmd`. Quando a tela do terminal abrir, digite:\n\n::: aside\ncmd é o terminal de comando do Windows, ou seja, a janela onde se digitam comandos ao sistema operacional. Em Linux e Mac é conhecido só como Terminal\n:::\n\n```{.r}\ngit --version\n```\n\n## 5. Criar uma conta gratuita no Github\n\n<https://github.com/>\n\nO Github oferecerá a opção de criar uma conta de estudante cheia de vantagens, mas o processo é muito burocrático e desnecessário. Escolha uma conta simples e FREE, e você terá acesso à hospedagem de páginas HTML com um limite de 15 GB, que é mais do que suficiente.\n\n## 6. Configurar o Git\n\n- Gravar no Git o nome de usuário e email\n\nAtravés do pacote `usethis` podemos configurar o Git diretamente do RStudio. \n\n::: aside\nAntes do pacote `usethis` a configuração do Git era um sofrimento! \n:::\n\nVamos agora informar seu nome do usuário no Github e seu email usado para abrir a conta. Isso só é feito uma vez.\n\n```{.r}\nusethis::use_git_config(\n  user.name = \"SEU NOME NO GITHUB\",\n  user.email = \"seu_email_no@gmail.com\")\n```\n\n- Criar um **Personal Access *Token*** (PAT)\n\nDe uns tempos para cá o Github aperfeiçoou o método de autenticação no site, de modo que a senha do usuário foi substituída por um `token`.\n\n::: aside\nLembre-se sempre que a senha pode ser substituído pelo token. Se em algum momento o Rstudio pedir a senha do Git, use o token.\n:::\n\nO token também pode ser criado dentro do RStudio usando o pacote `usethis`. \n\n::: aside\nVocê pode acessar diretamente a página do Github para criar um token, mas usando o pacote `usethis` as configurações são pré-fixadas.\n:::\n\n\n```{.r}\nusethis::create_github_token()\n```\n\nUma janela do navegador irá se abrir e poderá pedir o nome do usuário do Github e a senha.  \n\n![](img/Novo_PAT_do_Github.png)\n\nEscreva um nome para o token e escolha uma data de validade para ele. Deixe todo o resto das opções como estão e pressione o botão `Generate token`.\n\nUma nova janela aparecerá com o novo token recém-criado. Use o botão ao lado para copiar o tokrn.\n\nSem sair desta página, entre no RStudio e execute este comando: \n\n```{.r}\ngitcreds::gitcreds_set()\n```\n\nUm prompt na janela do Terminal dentro do RStudio vai pedir:\n\n`? Enter password or token:`\n\nPara responder:  \n\n-  copie o token recém-criado da página do Github (use o botão de copiar)  \n-  clique na janela da aba Terminal do RStudio  \n-  cole (ctrl-V) o token recém-copiado e pronto, estamos quase lá!\n\nO procedimento acima atribui o token ao Git para sempre, usando o pacote `gitcreds`, e você não mais precisará informá-lo toda vez que usar o Github a partir do RStudio. \n\n:::{.callout-caution}\n> ATENÇÃO:   \n\nDepois de sair da página de criação do token, nunca mais você conseguirá recuperá-lo facilmente. Copie o token para um arquivo, se quiser, guardá-lo, mas\n\n**NÃO COPIE O TOKEN PARA NENHUM ARQUIVO QUE FIQUE DENTRO DO PROJETO DO GITHUB.** \n\nCaso contrário, ocorrerá um erro de segurança.\n:::\n\n::: aside\nLembre-se que um novo token pode ser criado a qualquer momento usando os procedimentos aqui descritos. \n:::\n\n\nPara conferir se está tudo certo, digite:\n\n```{.r}\nusethis::git_sitrep()\n```\n\n:::{.callout-note}\n\n**PRONTO!**\n\nO seu RStudio está configurado para manipular arquivos do Github e criar sites inteiros com o **Quarto**, usando toda a riqueza da linguagem RMarkdown.\n:::\n\n## 7. Criar um novo repositório do Github\n\nEntre na página inicial do Github e na parte superior da tela à esquerda pressione o botão `NEW`.\n\nDê um nome para o novo repositório e pressione `Add a README file`. Mantenha o repositório como público para que posteriormente possamos transformá-lo num site (sites privados não podem).\n\n![](img/Novo_reposit.png)\n\nPronto! O novo repositório foi criado e já pode ser acessado pelo RStudio, por um processo chamado clonagem. Para clonar qualquer repositório no RStudio, pressione o botão `< > Code` e depois o botão `Copiar`.  \n\n::: aside\nExistem dois métodos para clonar um repositório, usando HTTPS e SSH. Aqui usaremos HTTPS, que é mais simples. SSH é usado em outros sistemas (Linux e Mac), mas é muito mais complicado. \n:::\n\n![](img/CopiarHTTPS.png)\n\n## 8. Criar um novo projeto no RStudio\n\nUm projeto no RStudio serve para agregar vários arquivos em um único diretório, que poderão ser manipulados mais facilmente.\n\nNo RStudio, entre em `File<New project>`.\n\nNa próxima tela, você poderá escolher entre criar um novo projeto num novo diretório, num diretório existente ou usando `controle de versões`.\n\nEscolha `Version Control.` \n\n\n![](img/Novo_Proj.png)\n\n::: aside\nHoje em dia eu guardo absolutamente tudo o que é produzido em R ou Python no Github. Mas na prática você pode criar qualquer tipo de arquivo.\n:::\n\nEm `Repository URL`, cole o a URL copiada lá no Github. O nome do novo diretório sugerido irá aparecer no outro campo. Por fim, escolha uma pasta onde uma cópia local do repositório será copiado.\n\n\n![](img/Novo_Proj2.png)\n\nO que aconteceu foi que o RStudio baixou todos os arquivos do repositório recém-criado no Github e agora você pode modificá-los localmente a atualizá-los remotamente.\n\nPronto! Você está com tudo pronto para começar a criar conteúdo para o seu repositório do Github.\n\nNa aba `Files` do RStudio, clique  no arquivo `README.md`.\n\nEste é um arquivo Markdown (.md) e portanto aceita toda a formatação do RMarkdown que já vimos. Mas este não um arquivo RMarkdown (.rmd) e portanto não aceita os comandos específicos do R, como chuncks.\n\n\n```{.r}\n## Teste de repositório\n\n### Autor\n\nEste é apenas um repositório de teste.\n```\n\nPara testá-lo, pressione `Preview` ou Ctrl+Shift+K.\n\n## 9. Sincronizar os arquivos locais com os arquivos remotos do Github.\n\nA sincronização dos arquivos não é tão simples quanto poderia ser, mas lembre-se que estamos lidando com um sistema (Git) que serve para versionamento de programas que podem ser manipulados por muitas pessoas, e por isso temos que aprender o seu funcionamento.\n\nQuando estamos com um projeto aberto no RStudio, aparece uma aba chamada `Git`, que é a partir de onde faremos as transferências dos arquivos.\n\nTodos os arquivos modificados aparecem ali. Clique em todos eles.\n\n![](img/Tela_Git.png)\n\n::: aside\nPROBLEMA: quando existem muitos arquivos para fazer um Commit, o RStudio pode travar. Isso acontece principalmente para apresentações do **Quarto** usando `revealjs`, que instalam a biblioteca inteira e isso representam dezenas de arquivos.  \n<br>\nPara solucionar isso, procure pela aba Terminal dentro do RStudio e digite o seguinte comando, que vai fazer um Commit sem passar pelo RStudio:\n\n```{.r}\ngit add -A && git commit -m \"staging all files\"\n```\n\n:::\n\nDepois pressione o botão `Commit`. Na nomenclatura Git, Commit significa gravar no disco as modificações, de forma preparar todos os arquivos para serem enviados ao Github. \n\nA seguinte tela vai aparecer:\n\n![](img/Tela_Commit.png)\n\nAntes de pressionar o botão `Commit`, você é obrigado a escreve alguma coisa em `Commit message`, caso contrário o processo será abortado. Isso é uma forma de obrigá-lo a documentar toda e qualquer mudança nos códigos.\n\nDepois de pressionar o botão `Commit`, uma tela de comando vai aparecer e pode ser fechada.\n\nA operação de enviar os arquivos para o Github, ou seja, fazer um upload, é chamada no linguajar do Git de `PUSH`. PULL seria a operação oposta, de download de uma versão o site, e é muito importante baixar as versões modificadas antes de começar a trabalhar localmente quando existem muitas pessoas modificando o arquivo simultaneamente.\n\nPressione então o botão `Push` e verifique lá na página do seu repositório do Github se as modificações foram efetuadas.\n\n::: asides\nÀs vezes pode demorar alguns minutos até que as alterações apareçam online no site. Outros vezes a atualização é muito rápida.\n:::\n\n![](img/Tela_Atualizada.png)\n\n## 10. Criando um site completo usando o Github pages\n\nInicialmente, crie um arquivo novo do tipo Quarto document, em `File<New file<Quarto document...`. O documento vem com o template padrão do Quarto, então você precisa fazer algumas modificações.\n\nSalve este arquivo `OBRIGATORIAMENTE` com o nome de `index.qmd` no diretório do projeto.\n\nPressione o botão `Render` ou Ctrl+Shift+K para renderizar o arquivo index.qmd e criar o arquivo index.html. Este será o arquivo da primeira página do seu site. Outras páginas são criadas da mesma maneira.\n\nFaça um `Commit` e depois um `Push`, conforme explicado anteriormente.\n\n\n## 11. Habilitando o Github Pages\n\nNa página do repositório, clique em Settings e depois em Pages. Em Branch, escolha `Main` e pressione `Save`. \n\nPronto, em alguns segundos o site estará no ar.\n\n![](img/Tela_Git_Page.jpg)\n\n## 12. Referências:\n\n-   Curso-r: <https://curso-r.github.io/zen-do-r/>\n-   R for data science: <https://r4ds.had.co.nz/>\n\n::: aside\nPrecisei adaptar muita coisa desses dois sites, que foram criados há um tempo e já estão ligeiramente desatualizados.\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}