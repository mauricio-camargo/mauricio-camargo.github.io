---
title: "Passos para integrar RStudio e Github"
format: html
toc: TRUE
toc-location: left
lang: pt-br
engine: knitr
---

---

## 1.Instalar os programas do ecossistema de reprodutibilidade do R (Windows, Linux ou Mac):

-   R: <https://cran.r-project.org>
-   RStudio: <https://posit.co/download/rstudio-desktop/>
-   Quarto: <https://quarto.org/docs/get-started/>  
-   Git: Veja instruções abaixo.

## 2.Instalar os pacotes no R:

```{.r}
install.packages('usethis')
install.packages('gitcreds')
install.packages('devtools')
install.packages('markdown')
install.packages('rmarkdown')
install.packages('knitr')
```

::: aside
Esta é uma maneira de instalar vários pacotes de uma só vez.
:::

O pacote `tinytex` do R serve para instalar toda a infra-estrutura do $\LaTeX$ para lidar com PDFs.  


```{.r}
install.packages('tinytex')
tinytex::install_tinytex()
```

::: aside
Antes do pacote tinytex a instalação do LaTeX era um inferno! 
:::

## 3. Desativar .RData e . Rhistory no RStudio

Este passo é opcional, porém é muito útil. Para acessá-lo, clique [aqui](Desativar_RData.html).

## 4. Instalar o Git

Baixe e instale o Git para o seu sistema operacional em  [https://git-scm.com/download](https://git-scm.com/download){target="_blank"}.

Teste a instalação do Git no terminal do Windows.  
Para abrir o terminal, clique no botão Iniciar do Windows e digite `cmd`. Quando a tela do terminal abrir, digite:

::: aside
cmd é o terminal de comando do Windows, ou seja, a janela onde se digitam comandos ao sistema operacional. Em Linux e Mac é conhecido só como Terminal
:::

```{.r}
git --version
```

## 5. Criar uma conta gratuita no Github

<https://github.com/>

O Github oferecerá a opção de criar uma conta de estudante cheia de vantagens, mas o processo é muito burocrático e desnecessário. Escolha uma conta simples e FREE, e você terá acesso à hospedagem de páginas HTML com um limite de 15 GB, que é mais do que suficiente.

## 6. Configurar o Git

- Gravar no Git o nome de usuário e email

Através do pacote `usethis` podemos configurar o Git diretamente do RStudio. 

::: aside
Antes do pacote `usethis` a configuração do Git era um sofrimento! 
:::

Vamos agora informar seu nome do usuário no Github e seu email usado para abrir a conta. Isso só é feito uma vez.

```{.r}
usethis::use_git_config(
  user.name = "SEU NOME NO GITHUB",
  user.email = "seu_email_no@gmail.com")
```

- Criar um **Personal Access *Token*** (PAT)

De uns tempos para cá o Github aperfeiçoou o método de autenticação no site, de modo que a senha do usuário foi substituída por um `token`.

::: aside
Lembre-se sempre que a senha pode ser substituído pelo token. Se em algum momento o Rstudio pedir a senha do Git, use o token.
:::

O token também pode ser criado dentro do RStudio usando o pacote `usethis`. 

::: aside
Você pode acessar diretamente a página do Github para criar um token, mas usando o pacote `usethis` as configurações são pré-fixadas.
:::


```{.r}
usethis::create_github_token()
```

Uma janela do navegador irá se abrir e poderá pedir o nome do usuário do Github e a senha.  

![](img/Novo_PAT_do_Github.png)

Escreva um nome para o token e escolha uma data de validade para ele. Deixe todo o resto das opções como estão e pressione o botão `Generate token`.

Uma nova janela aparecerá com o novo token recém-criado. Use o botão ao lado para copiar o tokrn.

Sem sair desta página, entre no RStudio e execute este comando: 

```{.r}
gitcreds::gitcreds_set()
```

Um prompt na janela do Terminal dentro do RStudio vai pedir:

`? Enter password or token:`

Para responder:
-  copie o token recém-criado da página do Github (use o botão de copiar) 
-  clique na janela da aba Terminal do RStudio
-  cole (ctrl-V) o token recém-copiado e pronto, estamos quase lá!

O procedimento acima atribui o token ao Git para sempre, usando o pacote `gitcreds`, e você não mais precisará informá-lo toda vez que usar o Github a partir do RStudio. 

:::{.callout-caution}
> ATENÇÃO:   

Depois de sair da página de criação do token, nunca mais você conseguirá recuperá-lo facilmente. Copie o token para um arquivo, se quiser, guardá-lo, mas

**NÃO COPIE O TOKEN PARA NENHUM ARQUIVO QUE FIQUE DENTRO DO PROJETO DO GITHUB.** 

Caso contrário, ocorrerá um erro de segurança.
:::

::: aside
Lembre-se que um novo token pode ser criado a qualquer momento usando os procedimentos aqui descritos. 
:::


Para conferir se está tudo certo, digite:

```{.r}
usethis::git_sitrep()
```

:::{.callout-caution}

> PRONTO!   

O seu RStudio está configurado para manipular arquivos do Github e criar sites inteiros usando o **Quarto**.
:::

## 7. Criar um novo repositório do Github

Entre na página inicial do Github e na parte superior da tela à esquerda pressione o botão `NEW`.

Dê um nome para o novo repositório e pressione `Add a README file`. Mantenha o repositório como público para que posteriormente possamos transformá-lo num site (sites privados não podem).

![](img/Novo_reposit.png)

Pronto! O novo repositório foi criado e já pode ser acessado pelo RStudio, por um processo chamado clonagem. Para clonar qualquer repositório no RStudio, pressione o botão `< > Code` e depois o botão `Copiar`.  

::: aside
Existem dois métodos para clonar um repositório, usando HTTPS e SSH. Aqui usaremos HTTPS, que é mais simples. SSH é usado em outros sistemas (Linux e Mac), mas é muito mais complicado. 
:::

![](img/CopiarHTTPS.png)

## 8. Criar um novo projeto no RStudio

Um projeto no RStudio serve para agregar vários arquivos em um único diretório, que poderão ser manipulados mais facilmente.

No RStudio, entre em `File<New project>`.

Na próxima tela, você poderá escolher entre criar um novo projeto num novo diretório, num diretório existente ou usando `controle de versões`.

Escolha `Version Control.` 


![](img/Novo_Proj.png)

::: aside
Hoje em dia eu guardo absolutamente tudo o que é produzido em R ou Python no Github. Mas na prática você pode criar qualquer tipo de arquivo.
:::

Em `Repository URL`, cole o a URL copiada lá no Github. O nome do novo diretório sugerido irá aparecer no outro campo. Por fim, escolha uma pasta onde uma cópia local do repositório será copiado.


![](img/Novo_Proj2.png)

O que aconteceu foi que o RStudio baixou todos os arquivos do repositório recém-criado no Github e agora você pode modificá-los localmente a atualizá-los remotamente.

Pronto! Você está com tudo pronto para começar a criar conteúdo para o seu repositório do Github.

Na aba `Files` do RStudio, clique  no arquivo `README.md`.

Este é um arquivo Markdown (.md) e portanto aceita toda a formatação do RMarkdown que já vimos. Mas este não um arquivo RMarkdown (.rmd) e portanto não aceita os comandos específicos do R, como chuncks.


```{.r}
## Teste de repositório

### Autor

Este é apenas um repositório de teste.
```

Para testá-lo, pressione `Preview` ou Ctrl+Shift+K.

## 9. Sincronizar os arquivos locais com os arquivos remotos do Github.

A sincronização dos arquivos não é tão simples quanto poderia ser, mas lembre-se que estamos lidando com um sistema (Git) que serve para versionamento de programas que podem ser manipulados por muitas pessoas, e por isso temos que aprender o seu funcionamento.

Quando estamos com um projeto aberto no RStudio, aparece uma aba chamada `Git`, que é a partir de onde faremos as transferências dos arquivos.

Todos os arquivos modificados aparecem ali. Clique em todos eles.

![](img/Tela_Git.png)

::: aside
PROBLEMA: quando existem muitos arquivos para fazer um Commit, o RStudio pode travar. Isso acontece principalmente para apresentações do **Quarto** usando `revealjs`, que instalam a biblioteca inteira e isso representam dezenas de arquivos.  
<br>
Para solucionar isso, procure pela aba Terminal dentro do RStudio e digite o seguinte comando, que vai fazer um Commit sem passar pelo RStudio:

```{.r}
git add -A && git commit -m "staging all files"
```

:::

Depois pressione o botão `Commit`. Na nomenclatura Git, Commit significa gravar no disco as modificações, de forma preparar todos os arquivos para serem enviados ao Github. 

A seguinte tela vai aparecer:

![](img/Tela_Commit.png)

Antes de pressionar o botão `Commit`, você é obrigado a escreve alguma coisa em `Commit message`, caso contrário o processo será abortado. Isso é uma forma de obrigá-lo a documentar toda e qualquer mudança nos códigos.

Depois de pressionar o botão `Commit`, uma tela de comando vai aparecer e pode ser fechada.

A operação de enviar os arquivos para o Github, ou seja, fazer um upload, é chamada no linguajar do Git de `PUSH`. PULL seria a operação oposta, de download de uma versão o site, e é muito importante baixar as versões modificadas antes de começar a trabalhar localmente quando existem muitas pessoas modificando o arquivo simultaneamente.

Pressione então o botão `Push` e verifique lá na página do seu repositório do Github se as modificações foram efetuadas.

::: asides
Às vezes pode demorar alguns minutos até que as alterações apareçam online no site. Outros vezes a atualização é muito rápida.
:::

![](img/Tela_Atualizada.png)

## 10. Criando um site completo usando o Github pages

Inicialmente, crie um arquivo novo do tipo Quarto document, em `File<New file<Quarto document...`. O documento vem com o template padrão do Quarto, então você precisa fazer algumas modificações.

Salve este arquivo `OBRIGATORIAMENTE` com o nome de `index.qmd` no diretório do projeto.

Pressione o botão `Render` ou Ctrl+Shift+K para renderizar o arquivo index.qmd e criar o arquivo index.html. Este será o arquivo da primeira página do seu site. Outras páginas são criadas da mesma maneira.

Faça um `Commit` e depois um `Push`, conforme explicado anteriormente.


## 11. Habilitando o Github Pages

Na página do repositório, clique em Settings e depois em Pages. Em Branch, escolha `Main` e pressione `Save`. 

Pronto, em alguns segundos o site estará no ar.

![](img/Tela_Git_Page.jpg)

## 12. Referências:

-   Curso-r: <https://curso-r.github.io/zen-do-r/>
-   R for data science: <https://r4ds.had.co.nz/>

::: aside
Precisei adaptar muita coisa desses dois sites, que foram criados há um tempo e já estão ligeiramente desatualizados.
:::

